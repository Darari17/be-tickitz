{
    "swagger": "2.0",
    "info": {
        "title": "Backend Tickitz",
        "contact": {},
        "version": "1.0"
    },
    "paths": {
        "/admin/movies": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve all movies for admin management",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get all movies (admin)",
                "responses": {
                    "200": {
                        "description": "Movies retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dtos.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.Movie"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new movie with poster \u0026 backdrop upload",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Create a new movie",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Movie title",
                        "name": "title",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Movie overview",
                        "name": "overview",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Movie director",
                        "name": "director_name",
                        "in": "formData"
                    },
                    {
                        "type": "integer",
                        "description": "Movie duration",
                        "name": "duration",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Release date (YYYY-MM-DD)",
                        "name": "release_date",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Movie popularity",
                        "name": "popularity",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Poster image",
                        "name": "poster",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Backdrop image",
                        "name": "backdrop",
                        "in": "formData"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Genre names (e.g. Action,Drama or genres=Action\u0026genres=Drama)",
                        "name": "genres",
                        "in": "formData"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Cast names (e.g. Tom Holland,Zendaya or casts=Tom Holland\u0026casts=Zendaya)",
                        "name": "casts",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Movie created successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dtos.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Movie"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/admin/movies/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a specific movie by ID for admin management",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get movie by ID (admin)",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Movie ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movie retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dtos.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Movie"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Movie not found",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Soft delete a movie by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Delete a movie",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Movie ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movie deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/dtos.SuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update movie with optional poster \u0026 backdrop upload",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Update movie",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Movie ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Movie title",
                        "name": "title",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Movie overview",
                        "name": "overview",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Movie director",
                        "name": "director_name",
                        "in": "formData"
                    },
                    {
                        "type": "integer",
                        "description": "Movie duration",
                        "name": "duration",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Release date (YYYY-MM-DD)",
                        "name": "release_date",
                        "in": "formData"
                    },
                    {
                        "type": "number",
                        "description": "Movie popularity",
                        "name": "popularity",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Poster image",
                        "name": "poster",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Backdrop image",
                        "name": "backdrop",
                        "in": "formData"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Genre names (e.g. Action,Drama or genres=Action\u0026genres=Drama)",
                        "name": "genres",
                        "in": "formData"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Cast names (e.g. Robert Downey Jr,Chris Evans or casts=Robert Downey Jr\u0026casts=Chris Evans)",
                        "name": "casts",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movie updated successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dtos.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Movie"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Movie not found",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Authenticate user and return JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.AuthRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dtos.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dtos.AuthResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid email or password",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/movies": {
            "get": {
                "description": "Retrieve paginated list of all movies with optional search and genre filters",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Movies"
                ],
                "summary": "Get all movies with filters",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search query for movie title",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Genre name filter",
                        "name": "genre",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movies retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dtos.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.Movie"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Failed to fetch movies",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/movies/popular": {
            "get": {
                "description": "Retrieve paginated list of popular movies",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Movies"
                ],
                "summary": "Get popular movies",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Popular movies retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dtos.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.Movie"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Failed to fetch popular movies",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/movies/upcoming": {
            "get": {
                "description": "Retrieve paginated list of upcoming movies",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Movies"
                ],
                "summary": "Get upcoming movies",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Upcoming movies retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dtos.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.Movie"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Failed to fetch upcoming movies",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/movies/{id}": {
            "get": {
                "description": "Retrieve detailed information about a specific movie",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Movies"
                ],
                "summary": "Get movie detail",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Movie ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Movie detail retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dtos.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Movie"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid movie ID",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Movie not found",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/orders": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new movie ticket order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Create a new order",
                "parameters": [
                    {
                        "description": "Order creation data",
                        "name": "order",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.CreateOrderRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Order created successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dtos.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Order"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request payload or seat codes",
                        "schema": {
                            "$ref": "#/definitions/dtos.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dtos.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to create order",
                        "schema": {
                            "$ref": "#/definitions/dtos.Response"
                        }
                    }
                }
            }
        },
        "/orders/history": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve order history for the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Get user order history",
                "responses": {
                    "200": {
                        "description": "Order history retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dtos.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.OrderDetail"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dtos.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch order history",
                        "schema": {
                            "$ref": "#/definitions/dtos.Response"
                        }
                    }
                }
            }
        },
        "/orders/schedules": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve all schedules for a specific movie",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Get movie schedules",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Movie ID",
                        "name": "movie_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Schedules retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dtos.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.Schedule"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid movie_id",
                        "schema": {
                            "$ref": "#/definitions/dtos.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch schedules",
                        "schema": {
                            "$ref": "#/definitions/dtos.Response"
                        }
                    }
                }
            }
        },
        "/orders/seats": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve available seats for a specific schedule",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Get available seats",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Schedule ID",
                        "name": "schedule_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Available seats retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dtos.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.Seat"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid schedule_id",
                        "schema": {
                            "$ref": "#/definitions/dtos.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch seats",
                        "schema": {
                            "$ref": "#/definitions/dtos.Response"
                        }
                    }
                }
            }
        },
        "/orders/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve detailed information about a specific transaction",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Get transaction detail",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Transaction detail retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dtos.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.OrderDetail"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid order ID",
                        "schema": {
                            "$ref": "#/definitions/dtos.Response"
                        }
                    },
                    "404": {
                        "description": "Order not found",
                        "schema": {
                            "$ref": "#/definitions/dtos.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dtos.Response"
                        }
                    }
                }
            }
        },
        "/profile": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve profile information for the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "Get user profile",
                "responses": {
                    "200": {
                        "description": "Profile retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dtos.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dtos.ProfileResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Profile not found",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update profile information for the authenticated user",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "Update user profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "First name",
                        "name": "firstname",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Last name",
                        "name": "lastname",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Phone number",
                        "name": "phone_number",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Avatar image",
                        "name": "avatar",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Profile updated successfully",
                        "schema": {
                            "$ref": "#/definitions/dtos.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/dtos.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dtos.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to update profile",
                        "schema": {
                            "$ref": "#/definitions/dtos.Response"
                        }
                    }
                }
            }
        },
        "/profile/change-password": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Change password using old, new, and confirm password",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Profile"
                ],
                "summary": "Change user password",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Old password",
                        "name": "old_password",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "New password",
                        "name": "new_password",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Confirm password",
                        "name": "confirm_password",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password changed successfully",
                        "schema": {
                            "$ref": "#/definitions/dtos.Response"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or password mismatch",
                        "schema": {
                            "$ref": "#/definitions/dtos.Response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized or invalid old password",
                        "schema": {
                            "$ref": "#/definitions/dtos.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to update password",
                        "schema": {
                            "$ref": "#/definitions/dtos.Response"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Register a new user account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User registration",
                "parameters": [
                    {
                        "description": "Registration data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.AuthRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Registration successful",
                        "schema": {
                            "$ref": "#/definitions/dtos.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Email already exists",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dtos.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dtos.AuthRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@mail.com"
                },
                "password": {
                    "type": "string",
                    "example": "Password123"
                }
            }
        },
        "dtos.AuthResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "dtos.CreateOrderRequest": {
            "type": "object",
            "required": [
                "email",
                "fullname",
                "payment_id",
                "phone",
                "schedule_id",
                "seat_codes"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "farid@example.com"
                },
                "fullname": {
                    "type": "string",
                    "example": "Farid Darari"
                },
                "payment_id": {
                    "type": "integer",
                    "example": 2
                },
                "phone": {
                    "type": "string",
                    "example": "+628123456789"
                },
                "schedule_id": {
                    "type": "integer",
                    "example": 8
                },
                "seat_codes": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[\"A1\"",
                        "\"A2\"]"
                    ]
                }
            }
        },
        "dtos.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 400
                },
                "data": {},
                "message": {
                    "type": "string",
                    "example": "error"
                },
                "success": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "dtos.ProfileResponse": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string",
                    "example": "https://example.com/avatar.png"
                },
                "firstname": {
                    "type": "string",
                    "example": "Farid"
                },
                "lastname": {
                    "type": "string",
                    "example": "Darari"
                },
                "phone_number": {
                    "type": "string",
                    "example": "08123456789"
                },
                "point": {
                    "type": "integer",
                    "example": 100
                },
                "user_id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                }
            }
        },
        "dtos.Response": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "data": {},
                "message": {
                    "type": "string",
                    "example": "request berhasil"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "dtos.SuccessResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "data": {},
                "message": {
                    "type": "string",
                    "example": "get data success"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "models.Cast": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.Genre": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.Movie": {
            "type": "object",
            "properties": {
                "backdrop_path": {
                    "type": "string"
                },
                "casts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Cast"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "string"
                },
                "director_name": {
                    "type": "string"
                },
                "duration": {
                    "type": "integer"
                },
                "genres": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Genre"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "overview": {
                    "type": "string"
                },
                "popularity": {
                    "type": "number"
                },
                "poster_path": {
                    "type": "string"
                },
                "release_date": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "models.Order": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "fullname": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "payment_id": {
                    "type": "integer"
                },
                "phone": {
                    "type": "string"
                },
                "qr_code": {
                    "type": "string"
                },
                "schedule_id": {
                    "type": "integer"
                },
                "seats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Seat"
                    }
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.OrderDetail": {
            "type": "object",
            "properties": {
                "cinema_name": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "fullname": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "location": {
                    "type": "string"
                },
                "movie": {
                    "$ref": "#/definitions/models.Movie"
                },
                "payment": {
                    "type": "string"
                },
                "payment_id": {
                    "type": "integer"
                },
                "phone": {
                    "type": "string"
                },
                "qr_code": {
                    "type": "string"
                },
                "schedule_id": {
                    "type": "integer"
                },
                "seats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Seat"
                    }
                },
                "time": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.Schedule": {
            "type": "object",
            "properties": {
                "cinema_id": {
                    "type": "integer"
                },
                "date": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "location_id": {
                    "type": "integer"
                },
                "movie_id": {
                    "type": "integer"
                },
                "time_id": {
                    "type": "integer"
                }
            }
        },
        "models.Seat": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "seat_code": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "RESTful API created using gin for BE Tickitz",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}