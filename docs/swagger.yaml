definitions:
  dtos.AuthRequest:
    properties:
      email:
        example: user@mail.com
        type: string
      password:
        example: Password123
        type: string
    required:
    - email
    - password
    type: object
  dtos.AuthResponse:
    properties:
      token:
        type: string
      user_id:
        type: string
    type: object
  dtos.CreateOrderRequest:
    properties:
      email:
        example: farid@example.com
        type: string
      fullname:
        example: Farid Darari
        type: string
      payment_id:
        example: 2
        type: integer
      phone:
        example: "+628123456789"
        type: string
      schedule_id:
        example: 8
        type: integer
      seat_codes:
        example:
        - '["A1"'
        - '"A2"]'
        items:
          type: string
        minItems: 1
        type: array
    required:
    - email
    - fullname
    - payment_id
    - phone
    - schedule_id
    - seat_codes
    type: object
  dtos.ErrorResponse:
    properties:
      code:
        example: 400
        type: integer
      data: {}
      message:
        example: error
        type: string
      success:
        example: false
        type: boolean
    type: object
  dtos.ProfileResponse:
    properties:
      avatar:
        example: https://example.com/avatar.png
        type: string
      firstname:
        example: Farid
        type: string
      lastname:
        example: Darari
        type: string
      phone_number:
        example: "08123456789"
        type: string
      point:
        example: 100
        type: integer
      user_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    type: object
  dtos.Response:
    properties:
      code:
        example: 200
        type: integer
      data: {}
      message:
        example: request berhasil
        type: string
      success:
        example: true
        type: boolean
    type: object
  dtos.SuccessResponse:
    properties:
      code:
        example: 200
        type: integer
      data: {}
      message:
        example: get data success
        type: string
      success:
        example: true
        type: boolean
    type: object
  models.Cast:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  models.Genre:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  models.Movie:
    properties:
      backdrop_path:
        type: string
      casts:
        items:
          $ref: '#/definitions/models.Cast'
        type: array
      created_at:
        type: string
      deleted_at:
        type: string
      director_name:
        type: string
      duration:
        type: integer
      genres:
        items:
          $ref: '#/definitions/models.Genre'
        type: array
      id:
        type: integer
      overview:
        type: string
      popularity:
        type: number
      poster_path:
        type: string
      release_date:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  models.Order:
    properties:
      created_at:
        type: string
      email:
        type: string
      fullname:
        type: string
      id:
        type: integer
      payment_id:
        type: integer
      phone:
        type: string
      qr_code:
        type: string
      schedule_id:
        type: integer
      seats:
        items:
          $ref: '#/definitions/models.Seat'
        type: array
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  models.OrderDetail:
    properties:
      cinema_name:
        type: string
      created_at:
        type: string
      date:
        type: string
      email:
        type: string
      fullname:
        type: string
      id:
        type: integer
      location:
        type: string
      movie:
        $ref: '#/definitions/models.Movie'
      payment:
        type: string
      payment_id:
        type: integer
      phone:
        type: string
      qr_code:
        type: string
      schedule_id:
        type: integer
      seats:
        items:
          $ref: '#/definitions/models.Seat'
        type: array
      time:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  models.Schedule:
    properties:
      cinema_id:
        type: integer
      date:
        type: string
      id:
        type: integer
      location_id:
        type: integer
      movie_id:
        type: integer
      time_id:
        type: integer
    type: object
  models.Seat:
    properties:
      id:
        type: integer
      seat_code:
        type: string
    type: object
info:
  contact: {}
  title: Backend Tickitz
  version: "1.0"
paths:
  /admin/movies:
    get:
      description: Retrieve all movies for admin management
      produces:
      - application/json
      responses:
        "200":
          description: Movies retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/dtos.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Movie'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all movies (admin)
      tags:
      - Admin
    post:
      consumes:
      - multipart/form-data
      description: Create a new movie with poster & backdrop upload
      parameters:
      - description: Movie title
        in: formData
        name: title
        required: true
        type: string
      - description: Movie overview
        in: formData
        name: overview
        type: string
      - description: Movie director
        in: formData
        name: director_name
        type: string
      - description: Movie duration
        in: formData
        name: duration
        required: true
        type: integer
      - description: Release date (YYYY-MM-DD)
        in: formData
        name: release_date
        required: true
        type: string
      - description: Movie popularity
        in: formData
        name: popularity
        type: number
      - description: Poster image
        in: formData
        name: poster
        required: true
        type: file
      - description: Backdrop image
        in: formData
        name: backdrop
        type: file
      - collectionFormat: csv
        description: Genre names (e.g. Action,Drama or genres=Action&genres=Drama)
        in: formData
        items:
          type: string
        name: genres
        type: array
      - collectionFormat: csv
        description: Cast names (e.g. Tom Holland,Zendaya or casts=Tom Holland&casts=Zendaya)
        in: formData
        items:
          type: string
        name: casts
        type: array
      produces:
      - application/json
      responses:
        "201":
          description: Movie created successfully
          schema:
            allOf:
            - $ref: '#/definitions/dtos.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Movie'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new movie
      tags:
      - Admin
  /admin/movies/{id}:
    delete:
      description: Soft delete a movie by ID
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Movie deleted successfully
          schema:
            $ref: '#/definitions/dtos.SuccessResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a movie
      tags:
      - Admin
    get:
      description: Retrieve a specific movie by ID for admin management
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Movie retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/dtos.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Movie'
              type: object
        "404":
          description: Movie not found
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get movie by ID (admin)
      tags:
      - Admin
    patch:
      consumes:
      - multipart/form-data
      description: Update movie with optional poster & backdrop upload
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      - description: Movie title
        in: formData
        name: title
        type: string
      - description: Movie overview
        in: formData
        name: overview
        type: string
      - description: Movie director
        in: formData
        name: director_name
        type: string
      - description: Movie duration
        in: formData
        name: duration
        type: integer
      - description: Release date (YYYY-MM-DD)
        in: formData
        name: release_date
        type: string
      - description: Movie popularity
        in: formData
        name: popularity
        type: number
      - description: Poster image
        in: formData
        name: poster
        type: file
      - description: Backdrop image
        in: formData
        name: backdrop
        type: file
      - collectionFormat: csv
        description: Genre names (e.g. Action,Drama or genres=Action&genres=Drama)
        in: formData
        items:
          type: string
        name: genres
        type: array
      - collectionFormat: csv
        description: Cast names (e.g. Robert Downey Jr,Chris Evans or casts=Robert
          Downey Jr&casts=Chris Evans)
        in: formData
        items:
          type: string
        name: casts
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: Movie updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/dtos.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Movie'
              type: object
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "404":
          description: Movie not found
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update movie
      tags:
      - Admin
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/dtos.AuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            allOf:
            - $ref: '#/definitions/dtos.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dtos.AuthResponse'
              type: object
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "401":
          description: Invalid email or password
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: User login
      tags:
      - Authentication
  /movies:
    get:
      description: Retrieve paginated list of all movies with optional search and
        genre filters
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - description: Search query for movie title
        in: query
        name: search
        type: string
      - description: Genre name filter
        in: query
        name: genre
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Movies retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/dtos.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Movie'
                  type: array
              type: object
        "500":
          description: Failed to fetch movies
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: Get all movies with filters
      tags:
      - Movies
  /movies/{id}:
    get:
      description: Retrieve detailed information about a specific movie
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Movie detail retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/dtos.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Movie'
              type: object
        "400":
          description: Invalid movie ID
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "404":
          description: Movie not found
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: Get movie detail
      tags:
      - Movies
  /movies/popular:
    get:
      description: Retrieve paginated list of popular movies
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Popular movies retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/dtos.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Movie'
                  type: array
              type: object
        "500":
          description: Failed to fetch popular movies
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: Get popular movies
      tags:
      - Movies
  /movies/upcoming:
    get:
      description: Retrieve paginated list of upcoming movies
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Upcoming movies retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/dtos.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Movie'
                  type: array
              type: object
        "500":
          description: Failed to fetch upcoming movies
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: Get upcoming movies
      tags:
      - Movies
  /orders:
    post:
      consumes:
      - application/json
      description: Create a new movie ticket order
      parameters:
      - description: Order creation data
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateOrderRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Order created successfully
          schema:
            allOf:
            - $ref: '#/definitions/dtos.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Order'
              type: object
        "400":
          description: Invalid request payload or seat codes
          schema:
            $ref: '#/definitions/dtos.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.Response'
        "500":
          description: Failed to create order
          schema:
            $ref: '#/definitions/dtos.Response'
      security:
      - BearerAuth: []
      summary: Create a new order
      tags:
      - Orders
  /orders/{id}:
    get:
      description: Retrieve detailed information about a specific transaction
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Transaction detail retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/dtos.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.OrderDetail'
              type: object
        "400":
          description: Invalid order ID
          schema:
            $ref: '#/definitions/dtos.Response'
        "404":
          description: Order not found
          schema:
            $ref: '#/definitions/dtos.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dtos.Response'
      security:
      - BearerAuth: []
      summary: Get transaction detail
      tags:
      - Orders
  /orders/history:
    get:
      description: Retrieve order history for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: Order history retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/dtos.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.OrderDetail'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.Response'
        "500":
          description: Failed to fetch order history
          schema:
            $ref: '#/definitions/dtos.Response'
      security:
      - BearerAuth: []
      summary: Get user order history
      tags:
      - Orders
  /orders/schedules:
    get:
      description: Retrieve all schedules for a specific movie
      parameters:
      - description: Movie ID
        in: query
        name: movie_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Schedules retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/dtos.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Schedule'
                  type: array
              type: object
        "400":
          description: Invalid movie_id
          schema:
            $ref: '#/definitions/dtos.Response'
        "500":
          description: Failed to fetch schedules
          schema:
            $ref: '#/definitions/dtos.Response'
      security:
      - BearerAuth: []
      summary: Get movie schedules
      tags:
      - Orders
  /orders/seats:
    get:
      description: Retrieve available seats for a specific schedule
      parameters:
      - description: Schedule ID
        in: query
        name: schedule_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Available seats retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/dtos.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Seat'
                  type: array
              type: object
        "400":
          description: Invalid schedule_id
          schema:
            $ref: '#/definitions/dtos.Response'
        "500":
          description: Failed to fetch seats
          schema:
            $ref: '#/definitions/dtos.Response'
      security:
      - BearerAuth: []
      summary: Get available seats
      tags:
      - Orders
  /profile:
    get:
      description: Retrieve profile information for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: Profile retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/dtos.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dtos.ProfileResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "404":
          description: Profile not found
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - Profile
    patch:
      consumes:
      - multipart/form-data
      description: Update profile information for the authenticated user
      parameters:
      - description: First name
        in: formData
        name: firstname
        type: string
      - description: Last name
        in: formData
        name: lastname
        type: string
      - description: Phone number
        in: formData
        name: phone_number
        type: string
      - description: Avatar image
        in: formData
        name: avatar
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Profile updated successfully
          schema:
            $ref: '#/definitions/dtos.Response'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/dtos.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.Response'
        "500":
          description: Failed to update profile
          schema:
            $ref: '#/definitions/dtos.Response'
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - Profile
  /profile/change-password:
    patch:
      consumes:
      - multipart/form-data
      description: Change password using old, new, and confirm password
      parameters:
      - description: Old password
        in: formData
        name: old_password
        required: true
        type: string
      - description: New password
        in: formData
        name: new_password
        required: true
        type: string
      - description: Confirm password
        in: formData
        name: confirm_password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            $ref: '#/definitions/dtos.Response'
        "400":
          description: Invalid request body or password mismatch
          schema:
            $ref: '#/definitions/dtos.Response'
        "401":
          description: Unauthorized or invalid old password
          schema:
            $ref: '#/definitions/dtos.Response'
        "500":
          description: Failed to update password
          schema:
            $ref: '#/definitions/dtos.Response'
      security:
      - BearerAuth: []
      summary: Change user password
      tags:
      - Profile
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user account
      parameters:
      - description: Registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dtos.AuthRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Registration successful
          schema:
            $ref: '#/definitions/dtos.SuccessResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "409":
          description: Email already exists
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: User registration
      tags:
      - Authentication
securityDefinitions:
  BearerAuth:
    description: RESTful API created using gin for BE Tickitz
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
